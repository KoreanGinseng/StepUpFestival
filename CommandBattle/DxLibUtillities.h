/*************************************************************************//*!

					@file	DxLibUtillities.h
					@brief	DxLibユーティリティクラス

															@author	いのうえ
															@date	2020.02.14
*//**************************************************************************/

//ONCE
#pragma once

//INCLUDE
#include	"DxLib.h"
#include	<string>

namespace DxLibPlus
{
	/*******************************//*!
	@brief	DxLibユーティリティクラス

	@author	いのうえ
	*//********************************/
	class CDxLibUtillities
	{
	private:
		CDxLibUtillities(void) = delete;
		~CDxLibUtillities(void) = delete;
	public:
		/*************************************************************************//*!
				@brief			ライブラリの初期化
				@param			None

				@return			0			成功<br>
								-1			エラー発生
		*//**************************************************************************/
		static int DxLibInit(void);
		/*************************************************************************//*!
				@brief			ライブラリ使用の終了
				@param			None

				@return			0			成功<br>
								-1			エラー発生
		*//**************************************************************************/
		static int DxLibEnd(void);
		/*************************************************************************//*!
				@brief			ウィンドウのメッセージを処理する
				@param			None

				@return			0			成功<br>
								-1			エラー発生・若しくはウィンドウが閉じられた
		*//**************************************************************************/
		static int ProcessMessage(void);
		/*************************************************************************//*!
				@brief			指定の時間だけ処理を止める
				@param[in]		t			止める時間(ミリ秒単位)

				@return			0			成功<br>
								-1			エラー発生
		*//**************************************************************************/
		static int WaitTimer(const int& t);
		/*************************************************************************//*!
				@brief			乱数を取得する
				@param[in]		max			取得する乱数の最大値

				@return			0~最大値までの乱数
		*//**************************************************************************/
		static int Random(const int& max);
		/*************************************************************************//*!
				@brief			乱数を取得する
				@param[in]		min			取得する乱数の最小値
				@param[in]		max			取得する乱数の最大値

				@return			最小値~最大値までの乱数
		*//**************************************************************************/
		static int Random(const int& min, const int& max);
		/*************************************************************************//*!
				@brief			乱数を取得する
				@param			None

				@return			0.0f~1.0fまでの乱数(下二桁まで)
		*//**************************************************************************/
		static float RandomFloat(void);
		/*************************************************************************//*!
				@brief			乱数の初期値を設定する
				@param[in]		seed		乱数の初期値

				@return			0			成功<br>
								-1			エラー発生
		*//**************************************************************************/
		static int SetRandom(const int& seed);
		// ********************************************************************************
		/// <summary>
		/// wstringをstringへ変換
		/// </summary>
		/// <param name="oWString">ワイド文字列</param>
		/// <returns>マルチバイト文字列</returns>
		/// <created>いのうえ,2020/02/19</created>
		/// <changed>いのうえ,2020/02/19</changed>
		// ********************************************************************************
		static std::string WStringToString(std::wstring oWString);
	};
}

