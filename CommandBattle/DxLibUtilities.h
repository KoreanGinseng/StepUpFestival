/*************************************************************************//*!

					@file	DxLibUtillities.h
					@brief	DxLibユーティリティクラス

															@author	いのうえ
															@date	2020.02.14
*//**************************************************************************/

//ONCE
#pragma once

//INCLUDE
#include	"DxLib.h"
#include	<string>

namespace DxLibPlus
{
	// ********************************************************************************
	/// <summary>
	/// DxLibユーティリティクラス
	/// </summary>
	// ********************************************************************************
	class CDxLibUtilities
	{
	private:
		//スタティッククラスにするためにコンストラクタの削除
		CDxLibUtilities(void) = delete;
		~CDxLibUtilities(void) = delete;
	public:
		// ********************************************************************************
		/// <summary>
		/// ライブラリの初期化
		/// </summary>
		/// <returns>成功(0)かエラー(-1)</returns>
		/// <created>いのうえ,2020/02/21</created>
		/// <changed>いのうえ,2020/02/21</changed>
		// ********************************************************************************
		static int DxLibInit(void);
		// ********************************************************************************
		/// <summary>
		/// ライブラリ使用の終了
		/// </summary>
		/// <returns>成功(0)かエラー(-1)</returns>
		/// <created>いのうえ,2020/02/21</created>
		/// <changed>いのうえ,2020/02/21</changed>
		// ********************************************************************************
		static int DxLibEnd(void);
		// ********************************************************************************
		/// <summary>
		/// ウィンドウのメッセージを処理する
		/// </summary>
		/// <returns>成功(0)かエラー(-1)</returns>
		/// <created>いのうえ,2020/02/21</created>
		/// <changed>いのうえ,2020/02/21</changed>
		// ********************************************************************************
		static int ProcessMessage(void);
		// ********************************************************************************
		/// <summary>
		/// 指定の時間だけ処理を止める
		/// </summary>
		/// <param name="t">止める時間(ミリ秒単位)</param>
		/// <returns>成功(0)かエラー(-1)</returns>
		/// <created>いのうえ,2020/02/21</created>
		/// <changed>いのうえ,2020/02/21</changed>
		// ********************************************************************************
		static int WaitTimer(const int& t);
		// ********************************************************************************
		/// <summary>
		/// 乱数を取得する	
		/// </summary>
		/// <param name="max">取得する乱数の最大値</param>
		/// <returns>0~最大値までの乱数</returns>
		/// <created>いのうえ,2020/02/21</created>
		/// <changed>いのうえ,2020/02/21</changed>
		// ********************************************************************************
		static int Random(const int& max);
		// ********************************************************************************
		/// <summary>
		/// 乱数を取得する	
		/// </summary>
		/// <param name="min">取得する乱数の最小値</param>
		/// <param name="max">取得する乱数の最大値</param>
		/// <returns>最小値~最大値までの乱数</returns>
		/// <created>いのうえ,2020/02/21</created>
		/// <changed>いのうえ,2020/02/21</changed>
		// ********************************************************************************
		static int Random(const int& min, const int& max);
		// ********************************************************************************
		/// <summary>
		/// 乱数を取得する
		/// </summary>
		/// <returns>0.0f~1.0fまでの乱数(下二桁まで)</returns>
		/// <created>いのうえ,2020/02/21</created>
		/// <changed>いのうえ,2020/02/21</changed>
		// ********************************************************************************
		static float RandomFloat(void);
		// ********************************************************************************
		/// <summary>
		/// 乱数の初期値を設定する
		/// </summary>
		/// <param name="seed">乱数の初期値</param>
		/// <returns>成功(0)かエラー(-1)</returns>
		/// <created>いのうえ,2020/02/21</created>
		/// <changed>いのうえ,2020/02/21</changed>
		// ********************************************************************************
		static int SetRandom(const int& seed);
		// ********************************************************************************
		/// <summary>
		/// wstringをstringへ変換
		/// </summary>
		/// <param name="oWString">ワイド文字列</param>
		/// <returns>マルチバイト文字列</returns>
		/// <created>いのうえ,2020/02/19</created>
		/// <changed>いのうえ,2020/02/19</changed>
		// ********************************************************************************
		static std::string WStringToString(std::wstring oWString);
		// ********************************************************************************
		/// <summary>
		/// 文字列分割
		/// </summary>
		/// <param name="buff">分割する文字列</param>
		/// <param name="spa">分割するキー</param>
		/// <param name="outstrlen">長さ出力</param>
		/// <param name="outindent">文字列インデント出力</param>
		/// <returns>分割後文字列</returns>
		/// <created>いのうえ,2020/02/23</created>
		/// <changed>いのうえ,2020/02/23</changed>
		// ********************************************************************************
		static std::string GetSpalateString(const std::string& buff,const std::string& spa, int& outstrlen, int& outindent);
	};
}

