/*************************************************************************//*!

					@file	Player.h
					@brief	プレイヤークラス

															@author	いのうえ
															@date	2020.02.21
*//**************************************************************************/

//ONCE
#pragma once

//INCLUDE
#include "Chara.h"
#include <iostream>
#include <fstream>
#include <codecvt>

namespace DxLibPlus
{
	//行最大数
	constexpr int LineMax = (CommandRectH / (FontSize + FontMargin * 2)) + ((CommandRectH % (FontSize + FontMargin * 2)) ? 1 : 0);
	
	// ********************************************************************************
	/// <summary>
	/// プレイヤークラス
	/// </summary>
	// ********************************************************************************
	class CPlayer : public CChara
	{
	private:
		/// <summary>コマンドの状態列挙</summary>
		enum CommandState {
			COMMAND_WAIT,								//!<待機
			COMMAND_ATTACK,								//!<攻撃
			COMMAND_SKILL,								//!<スキル
			COMMAND_EXIT,								//!<ゲーム終了
		} m_State;										//!<状態
		int							m_Cursor;			//!<カーソル
		std::vector<Skill>			m_SkillList;		//!<スキルリスト
		bool                        m_bEnd{ false };    //!<逃げるフラグ
	public:
		// ********************************************************************************
		/// <summary>
		/// @brief			コンストラクタ
		/// </summary>
		/// <returns></returns>
		/// <created>いのうえ,2020/02/19</created>
		/// <changed>いのうえ,2020/02/19</changed>
		// ********************************************************************************
		CPlayer(void);
		// ********************************************************************************
		/// <summary>
		/// デストラクタ
		/// </summary>
		/// <returns></returns>
		/// <created>いのうえ,2020/02/19</created>
		/// <changed>いのうえ,2020/02/19</changed>
		// ********************************************************************************
		virtual ~CPlayer(void);
		// ********************************************************************************
		/// <summary>
		/// 読み込み
		/// </summary>
		/// <returns></returns>
		/// <created>いのうえ,2020/02/19</created>
		/// <changed>いのうえ,2020/02/19</changed>
		// ********************************************************************************
		virtual bool Load(void) override;
		// ********************************************************************************
		/// <summary>
		/// 初期化
		/// </summary>
		/// <created>いのうえ,2020/02/21</created>
		/// <changed>いのうえ,2020/02/21</changed>
		// ********************************************************************************
		virtual void Initialize(void) override;
		// ********************************************************************************
		/// <summary>
		/// 更新
		/// </summary>
		/// <created>いのうえ,2020/02/21</created>
		/// <changed>いのうえ,2020/02/21</changed>
		// ********************************************************************************
		virtual void Update(void) override;
		// ********************************************************************************
		/// <summary>
		/// 描画
		/// </summary>
		/// <created>いのうえ,2020/02/21</created>
		/// <changed>いのうえ,2020/02/21</changed>
		// ********************************************************************************
		virtual void Render(void) override;
		// ********************************************************************************
		/// <summary>
		/// ステータス描画
		/// </summary>
		/// <created>いのうえ,2020/02/21</created>
		/// <changed>いのうえ,2020/02/21</changed>
		// ********************************************************************************
		virtual void RenderStatus(void);
		// ********************************************************************************
		/// <summary>
		/// 解放
		/// </summary>
		/// <created>いのうえ,2020/02/21</created>
		/// <changed>いのうえ,2020/02/21</changed>
		// ********************************************************************************
		virtual void Release(void) override;
		// ********************************************************************************
		/// <summary>
		/// 切り替え処理
		/// </summary>
		/// <created>いのうえ,2020/02/21</created>
		/// <changed>いのうえ,2020/02/21</changed>
		// ********************************************************************************
		void TurnStart(void);

		bool IsEnd(void) const { return m_bEnd; }

	private:
		// ********************************************************************************
		/// <summary>
		/// カーソル移動処理
		/// </summary>
		/// <created>いのうえ,2020/02/23</created>
		/// <changed>いのうえ,2020/02/23</changed>
		// ********************************************************************************
		void CursorMove(void);
		// ********************************************************************************
		/// <summary>
		/// カーソルをリスト数以上超えないようにする処理
		/// </summary>
		/// <created>いのうえ,2020/02/23</created>
		/// <changed>いのうえ,2020/02/23</changed>
		// ********************************************************************************
		void CursorOver(void);
		// ********************************************************************************
		/// <summary>
		/// 決定ボタンを押したとき選んだコマンドによって状態を変化させる処理
		/// </summary>
		/// <created>いのうえ,2020/02/23</created>
		/// <changed>いのうえ,2020/02/23</changed>
		// ********************************************************************************
		void EnterWait(void);
		// ********************************************************************************
		/// <summary>
		/// スキルを決めたときの処理
		/// </summary>
		/// <created>いのうえ,2020/02/23</created>
		/// <changed>いのうえ,2020/02/23</changed>
		// ********************************************************************************
		void EnterSkill(void);
	};
}

