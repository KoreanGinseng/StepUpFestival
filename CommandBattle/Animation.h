/*********************************************************************************************************
 * @file		Animation.h
 * @brief		アニメーションクラス、構造体の定義
 * @author		井上颯騎
 * @date		2019/07/14
 *********************************************************************************************************/
#pragma once
#include	"Base.h"

/*!
 * アニメーション単体フレーム生成用構造体
 */
typedef struct tag_ANIMATION {
	float		Wait;			//! 待機フレーム
	float		No;				//! 横方向の区切り番号
	float		Step;			//! 縦方向の区切り番号
}ANIMATION;

/*!
 * アニメーションパターン生成用構造体
 */
template < int N > struct ANIMATIONCREATEFRAME {
	const char*							Name;						//! アニメーション名
	float								OffsetX;					//! Xオフセット位置
	float								OffsetY;					//! Yオフセット位置
	float								Width;						//! 幅
	float								Height;						//! 高さ
	bool								bLoop;						//! ループフラグ(TRUEならループ、FALSEなら最終フレームで停止)
	ANIMATION							Pattern[N];					//! パターン
};

typedef ANIMATIONCREATEFRAME<30> ANIMATIONFRAME;					//! アニメーションフレーム置き換え

/*!
 * アニメーションクラス
 */
class CAnimation {
private:
	int					m_NowFrame;									//! 現在のアニメーションフレーム
	int					m_NowWait;									//! 現在のアニメーション待機フレーム
	int					m_FrameCount;								//! アニメーションの最大フレーム数
	int					m_AnimCount;								//! アニメーションパターン数
	int					m_MAXAnimCount;								//! アニメーションパターン最大数
	ANIMATIONFRAME*		m_pAnimFrame;								//! 生成されたアニメーションパターンのポインタ
public:
/*********************************************************************************************************
 * @fn
 * 標準コンストラクタ
 * @brief		標準コンストラクタ
 * @param()		なし
 * @return		なし
 *********************************************************************************************************/
	CAnimation() : m_NowFrame(0), m_NowWait(0), m_FrameCount(0), m_AnimCount(0),m_MAXAnimCount(0), m_pAnimFrame(nullptr) {}

/*********************************************************************************************************
 * @fn
 * アニメーションパターンの変更関数
 * @brief				アニメーションパターンの変更
 * @param(animNo)		アニメーションパターン番号
 * @return				なし
 *********************************************************************************************************/
	void		ChangeMotion(int animNo);

/*********************************************************************************************************
 * @fn
 * アニメーションクラスへのアニメーション生成関数
 * @brief				アニメーション生成
 * @param(*anim)		アニメーションパターンのポインタ
 * @param(animCount)	アニメーションパターンの最大数
 * @return		なし
 *********************************************************************************************************/
	void		Create(ANIMATIONFRAME* anim, int animCount);

/*********************************************************************************************************
 * @fn
 * 現在のアニメーションパターンのフレームを加算する関数
 * @brief		アニメーションフレーム加算
 * @param()		なし
 * @return		なし
 *********************************************************************************************************/
	void		addTimer();

/*********************************************************************************************************
 * @fn
 * 現在のアニメーションの矩形を取得する関数
 * @brief		現在のアニメーション矩形取得
 * @param()		なし
 * @return		現在のアニメーション矩形
 *********************************************************************************************************/
	SRectangle	GetSrcRect();
};
